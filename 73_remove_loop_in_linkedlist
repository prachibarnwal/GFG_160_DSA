/*
Given the head of a linked list that may contain a loop.  A loop means that the 
last node of the linked list is connected back to a node in the same list. 
The task is to remove the loop from the linked list (if it exists).

Custom Input Format:
A head of a singly linked list and a pos (1-based index) which denotes the 
position of the node to which the last node points to. If pos = 0, it means 
the last node points to null, indicating there is no loop.

The generated output will be true if there is no loop in list and other 
nodes in the list remain unchanged, otherwise, false.
*/

// Function to remove a loop in the linked list.
    void removeLoop(Node* head){
        if(head == NULL || !head -> next)
            return;

        Node *s = head;
        Node *f = head;
        //searching for the loop
        while(f && f -> next){
            s = s -> next;
            f = f -> next -> next;
            //if loop found
            if(s == f){
                s = head;
                //going to the point where the loop is starting
                while(s != f){
                    s = s -> next;
                    f = f -> next;
                }
                //going to the last node
                while(f -> next != s)
                    f = f-> next;
                //setting the last node as NULL to break the loop
                f -> next = NULL;
            }
        }//tc: O(N); sc: O(1);
    }
