/*
Cases for atoi() conversion:
Skip any leading whitespaces.
Check for a sign (‘+’ or ‘-‘), default to positive if no sign is present.
Read the integer by ignoring leading zeros until a non-digit character is encountered or end of the string is reached.
If no digits are present, return 0.
If the integer is greater than 231 – 1, then return 231 – 1 and if the integer is smaller than -231, then return -231.
*/

int myAtoi(char *s){
        
        int sign = 1;
        int result = 0;
        int indx = 0;

        //blank spaces;
        while(s[indx] == ' ')
            indx++;
        
        //sign storing
        if(s[indx] == '+' || s[indx] == '-'){
            if(s[indx++] == '-')
                sign = -1;
        }
        
        //calc int;
        while(s[indx] >= '0' && s[indx] <= '9'){
            result = result * 10 + (s[indx++] -'0');
            
            if((result == INT_MAX/10 && s[indx] - '0' > 7) || result > INT_MAX/10)
                return sign == 1 ? INT_MAX : INT_MIN;
        }
        
        return result * sign;
    }
