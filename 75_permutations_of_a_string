/*
Given a string s, which may contain duplicate characters, 
your task is to generate and return an array of all unique 
permutations of the string. You can return your answer in any order.
*/

void solve(string s, vector<string> &res, int ind){
        //base case
        if(ind >= s.size()){
            res.push_back(s);
            return;
        }
        unordered_set<char> used;
        for(int j = ind; j<s.size(); j++){
            //to avoid duplicates
            if(used.find(s[j]) != used.end())
                continue;
            used.insert(s[j]);
            
            swap(s[j], s[ind]);
        
            solve(s, res, ind+1);
            //backtracking
            swap(s[j], s[ind]);
        }
    }
    vector<string> findPermutation(string &s){
        vector<string> res;
        int ind = 0;
        solve(s,res, ind);
        
        return res;
    }//tc: O(n*n!);
    //sc: O(n!);
