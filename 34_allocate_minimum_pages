/*
You are given an array arr[] of integers, where each element arr[i] 
represents the number of pages in the ith book. You also have an integer 
k representing the number of students. The task is to allocate books to each student such that:

Each student receives atleast one book.
Each student is assigned a contiguous sequence of books.
No book is assigned to more than one student.

The objective is to minimize the maximum number of pages assigned to any student. 
In other words, out of all possible allocations, find the arrangement where the 
student who receives the most pages still has the smallest possible maximum.

Note: Return -1 if a valid assignment is not possible, and allotment should be in 
contiguous order (see the explanation for better understanding).
*/

//function to check if books can be allocated to all k
    //students without exceeding 'mp' limit
    bool TF(vector<int> &arr, int n, int k, int mp){
        int stu = 1, pageA = 0;
        for(int i = 0; i<n;i++){
            if(pageA + arr[i] > mp){
                stu++;
                pageA = arr[i];
            }
            else
                pageA += arr[i];
        }
        return stu<=k;
    }

    int findPages(vector<int> &arr, int k) {
        int n = arr.size();
        
        if(n<k)
            return -1;
            
        int beg = *max_element(arr.begin(), arr.end());
        int end = accumulate(arr.begin(),arr.end(), 0);
        
        int res = -1;
        while(beg <= end){
            int med = (beg+end) /2;
            if(TF(arr,n, k, med)){
                res = med;
                end = med-1;
            }
            else
                beg = med+1;
        }
        return res;
        //tC: O(n * log m);
        //where m = sum - max;
    }
