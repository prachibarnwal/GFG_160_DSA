/*
Given the head of two singly linked lists num1 and num2 representing two non-negative integers. 
The task is to return the head of the linked list representing the sum of these two numbers.

For example, num1 represented by the linked list : 1 -> 9 -> 0, similarly num2 represented by the 
linked list: 2 -> 5. Sum of these two numbers is represented by 2 -> 1 -> 5.

Note: There can be leading zeros in the input lists, but there should not be any leading zeros in the output list.
*/

Node *reverse(Node *head){
        Node *prev = nullptr, *curr = head, *next;
        
        while(curr != NULL){
            next = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    Node *trimLeadingZeroes(Node *head){
        while(head -> next != nullptr && head -> data == 0){
            head = head -> next;
        }
        return head;
    }
    int countNodes(Node *head){
        int len = 0;
        while(head != NULL){
            head = head -> next;
            len++;
        }
        return len;
    }
    
    Node* addTwoLists(Node* n1, Node* n2){
        n1 = trimLeadingZeroes(n1);
        n2 = trimLeadingZeroes(n2);
        
        int l1 = countNodes(n1);
        int l2 = countNodes(n2);
        
        if(l1 < l2){
            return addTwoLists(n2, n1);
        }
        
        int carry = 0;
        n1 = reverse(n1);
        n2 = reverse(n2);
        
        Node *res = n1;
        
        while(n1 != NULL || n2 != nullptr || carry != 0){
            n1 -> data += carry;
            if(n2 != NULL){
                n1 -> data += n2 -> data;
                n2 = n2 -> next;
            }
            carry = n1 -> data / 10;
            n1 -> data = n1 -> data % 10;
            
            if(n1 -> next == NULL && carry != 0){
                n1 -> next = new Node(0);
            }
            n1 = n1 -> next;
        }
        //tc: O(m+n); sc: O(1);
        return reverse(res);
    }
