/*
The cost of stock on each day is given in an array price[]. Each day you may decide to either buy or sell the stock at price[i], you can even buy and sell the stock on the same day. Find the maximum profit that you can get.

Note: A stock can only be sold if it has been bought previously and multiple stocks cannot be held on any given day.
*/
int maximumProfit(vector<int> &prices) {
        // code here
        int n = prices.size();
        int prof = 0;
        /*
        int lmin = prices[0];
        int lmax = prices[0];
        int i=0;
        while(i < n-1){
            //local minima
            while(i < n-1 && prices[i] >= prices[i+1])
                i+=1;
            lmin = prices[i];
            //local maxima
            while(i<n-1 && prices[i] <= prices[i+1])
                i+=1;
            lmax = prices[i];
            
            prof += lmax - lmin;
        }
        return prof;*/
        
        //more optimized soln, let's go for it !!
        for(int i = 0;i<n-1;i++){
            if(prices[i+1] > prices[i])
                prof +=prices[i+1] - prices[i];
        }
        return prof;
    }
