/*
Given an array arr[] containing only non-negative integers, 
your task is to find a continuous subarray (a contiguous sequence of elements) 
whose sum equals a specified value target. You need to return the 1-based 
indices of the leftmost and rightmost elements of this subarray. 
You need to find the first subarray whose sum is equal to the target.

Note: If no such array is possible then, return [-1].
*/

vector<int> subarraySum(vector<int> &arr, int k){
        //sliding window method
        int sum = 0;
        int l = 0, r = 0;
        
        for(int i = 0; i<arr.size(); i++){
            sum += arr[i];
            r = i;
        
            if(sum >= k){
                while(sum > k && l < r){
                    sum -= arr[l];
                    l++;
                }
        
                if(sum == k){
                    return {l+1, r+1};
                }
            }
        }//tC: O(n);
        //sC: O(1);
        return {-1};
    }
