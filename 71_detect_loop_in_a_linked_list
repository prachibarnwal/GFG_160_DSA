/*
You are given the head of a singly linked list. Your task is 
to determine if the linked list contains a loop. A loop exists 
in a linked list if the next pointer of the last node points 
to any other node in the list (including itself), rather than being null.

Custom Input format:
A head of a singly linked list and a pos (1-based index) which denotes the 
position of the node to which the last node points to. If pos = 0, it means 
the last node points to null, indicating there is no loop.
*/

// Function to check if the linked list has a loop.
    bool detectLoop(Node* head) {
        /*
        //using hashmap
        unordered_set<Node*> mp;
        Node *temp = head;
        while(temp != nullptr){
            if(mp.find(temp) != mp.end()){
                return true;
            }
            mp.insert(temp);
            temp = temp -> next;
        }//tc: O(n); sc:O(n);
        return false;
        */
        //using two pointers method slow and fast
        Node *kachhua = head, *khargosh = head;
        while(khargosh && khargosh -> next != NULL){
            //moving to next node skipping itself
            kachhua = kachhua -> next;
            //moving to next's next node skipping 2 node
            khargosh = khargosh -> next -> next;
            //if nodes are same i.e., loop found
            if(kachhua == khargosh){
                return true;
            }
        }//tc: O(n); sc: O(1);
        return false;
        //and ofc, slow n steady wins the race ~_~~
    }
